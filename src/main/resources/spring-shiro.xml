<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">


	<!-- 凭证匹配器 --><!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->
	<bean id="credentialsMatcher"
		class="com.susd.domainservice.identity.RetryLimitCredentialsMatcher">
		<constructor-arg index="0" ref="shiroCacheManager" />
		<constructor-arg index="1" value="passwordRetryCache" />
		<property name="maxRetryCount" value="5" /><!-- 默认是5 -->
		<property name="hashAlgorithmName" value="md5" />
		<property name="hashIterations" value="2" />
		<property name="storedCredentialsHexEncoded" value="true" />
	</bean>
	<!-- 自定义Realm -->
	<bean id="userRealm"
		class="com.susd.domainservice.identity.UserRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />
	</bean>
	<!-- 使用Shiro自带的JdbcRealm类 指定密码匹配所需要用到的加密对象 指定存储用户、角色、权限许可的数据源及相关查询语句 -->
	<!-- <bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm"> 
		<property name="credentialsMatcher" ref="credentialsMatcher"></property> 
		<property name="permissionsLookupEnabled" value="true"></property> <property 
		name="dataSource" ref="dataSource"></property> <property name="saltStyle" 
		value="COLUMN"></property> <property name="authenticationQuery" value="select 
		`password`,salt from sys_user where user_name = ?"></property> <property 
		name="userRolesQuery" value="select r.`name` from sys_user_role ur inner 
		join sys_role r on ur.role_id=r.id inner join sys_user u on r.id=ur.user_id 
		where `name` = ?"></property> <property name="permissionsQuery" value="select 
		s.permission from sys_role_resource rr inner join sys_role r on rr.role_id=r.id 
		inner join sys_resource s on s.id=rr.resource_id where r.`name` = ?"></property> 
		</bean> -->

	

	<!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
	<bean id="sharesession"
		class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- cookie的name,对应的默认是 JSESSIONID -->
		<constructor-arg name="name" value="COM.SUSD" />
		<!-- jsessionId的path为 / 用于多个系统共享jsessionId -->
		<property name="path" value="/" />
		<!-- maxAge 单位为秒 默认为-1表示关闭浏览器过期cookie -->
		<property name="maxAge" value="3600" />
		<property name="httpOnly" value="true" />
	</bean>
	
	<!-- 会话管理器 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- session的失效时长，单位毫秒 -->
		<property name="globalSessionTimeout" value="3600000" />
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true" />
		<property name="sessionIdCookie" ref="sharesession" />
		<!-- 去掉 JSESSIONID -->
		<!-- <property name="sessionIdUrlRewritingEnabled" value="false" /> -->
	</bean>

	<!-- 记住我cookie -->
	<bean id="rememberMeCookie"
		class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- rememberMe是cookie的名字 -->
		<constructor-arg value="rememberMe" />
		<!-- 记住我cookie生效时间7天 -->
		<property name="maxAge" value="604800" />
		<property name="name">
			<value>shudi</value>
		</property>
	</bean>

	<!-- rememberMeManager管理器，写cookie，取出cookie生成用户信息 -->
	<bean id="rememberMeManager"
		class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie" ref="rememberMeCookie" />
	</bean>


	<!-- securityManager安全管理器 -->
	<bean id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm" />
		<!-- 注入缓存管理器 -->
		<property name="cacheManager" ref="shiroCacheManager" />
		<!-- 注入session管理器 -->
		<property name="sessionManager" ref="sessionManager" />
		<!-- 记住我 -->
		<property name="rememberMeManager" ref="rememberMeManager" />

	</bean>


	<!-- 自定义form认证过虑器 -->
	<!-- 基于Form表单的身份验证过滤器，不配置将也会注册此过虑器，表单中的用户账号、密码及loginurl将采用默认值，建议配置 -->
	<bean id="formAuthenticationFilter"
		class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<!-- 表单中账号的input名称 -->
		<property name="usernameParam" value="userName" />
		<!-- 表单中密码的input名称 -->
		<property name="passwordParam" value="password" />
		<!-- 记住我input的名称 -->
		<property name="rememberMeParam" value="rememberMe" />
	</bean>


	<!-- web.xml中shiro的filter对应的bean -->
	<!-- Shiro 的Web过滤器 -->
	<bean id="shiroFilter"
		class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
		<property name="loginUrl" value="/login" />
		<!-- 认证成功统一跳转到first.action，建议不配置，shiro认证成功自动到上一个请求路径 -->
		<property name="successUrl" value="/" />
		<!-- 通过unauthorizedUrl指定没有权限操作时跳转页面 -->
		<property name="unauthorizedUrl" value="/error/unauthorized" />
		<!-- 自定义filter配置 -->
		<property name="filters">
			<map>
				<!-- 将自定义 的FormAuthenticationFilter注入shiroFilter中 -->
				<entry key="authc" value-ref="formAuthenticationFilter" />
			</map>
		</property>

		<!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- 对静态资源设置匿名访问 -->
				/assets/** = anon

				<!-- 请求 logout地址，shiro去清除session -->
				/logout = logout
				/login = anon
				/logon = anon


				<!-- 配置记住我或认证通过可以访问的地址 -->

				<!-- /** = authc 所有url都必须认证通过才可以访问 -->
				/** = user
				<!-- /** = anon所有url都可以匿名访问 -->

			</value>
		</property>
	</bean>

	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor"
		class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>

</beans>